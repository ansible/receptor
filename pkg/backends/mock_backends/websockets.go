// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/backends/websockets.go

// Package mock_backends is a generated GoMock package.
package mock_backends

import (
	context "context"
	tls "crypto/tls"
	io "io"
	net "net"
	http "net/http"
	reflect "reflect"
	sync "sync"
	time "time"

	netceptor "github.com/ansible/receptor/pkg/netceptor"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockGorillaWebsocketDialerForDialer is a mock of GorillaWebsocketDialerForDialer interface.
type MockGorillaWebsocketDialerForDialer struct {
	ctrl     *gomock.Controller
	recorder *MockGorillaWebsocketDialerForDialerMockRecorder
}

// MockGorillaWebsocketDialerForDialerMockRecorder is the mock recorder for MockGorillaWebsocketDialerForDialer.
type MockGorillaWebsocketDialerForDialerMockRecorder struct {
	mock *MockGorillaWebsocketDialerForDialer
}

// NewMockGorillaWebsocketDialerForDialer creates a new mock instance.
func NewMockGorillaWebsocketDialerForDialer(ctrl *gomock.Controller) *MockGorillaWebsocketDialerForDialer {
	mock := &MockGorillaWebsocketDialerForDialer{ctrl: ctrl}
	mock.recorder = &MockGorillaWebsocketDialerForDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGorillaWebsocketDialerForDialer) EXPECT() *MockGorillaWebsocketDialerForDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockGorillaWebsocketDialerForDialer) Dial(urlStr string, requestHeader http.Header) (*websocket.Conn, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", urlStr, requestHeader)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Dial indicates an expected call of Dial.
func (mr *MockGorillaWebsocketDialerForDialerMockRecorder) Dial(urlStr, requestHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockGorillaWebsocketDialerForDialer)(nil).Dial), urlStr, requestHeader)
}

// DialContext mocks base method.
func (m *MockGorillaWebsocketDialerForDialer) DialContext(ctx context.Context, urlStr string, requestHeader http.Header) (*websocket.Conn, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, urlStr, requestHeader)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DialContext indicates an expected call of DialContext.
func (mr *MockGorillaWebsocketDialerForDialerMockRecorder) DialContext(ctx, urlStr, requestHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockGorillaWebsocketDialerForDialer)(nil).DialContext), ctx, urlStr, requestHeader)
}

// MockWebsocketListenerForWebsocket is a mock of WebsocketListenerForWebsocket interface.
type MockWebsocketListenerForWebsocket struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketListenerForWebsocketMockRecorder
}

// MockWebsocketListenerForWebsocketMockRecorder is the mock recorder for MockWebsocketListenerForWebsocket.
type MockWebsocketListenerForWebsocketMockRecorder struct {
	mock *MockWebsocketListenerForWebsocket
}

// NewMockWebsocketListenerForWebsocket creates a new mock instance.
func NewMockWebsocketListenerForWebsocket(ctrl *gomock.Controller) *MockWebsocketListenerForWebsocket {
	mock := &MockWebsocketListenerForWebsocket{ctrl: ctrl}
	mock.recorder = &MockWebsocketListenerForWebsocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketListenerForWebsocket) EXPECT() *MockWebsocketListenerForWebsocketMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockWebsocketListenerForWebsocket) Addr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).Addr))
}

// GetAddr mocks base method.
func (m *MockWebsocketListenerForWebsocket) GetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddr indicates an expected call of GetAddr.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).GetAddr))
}

// GetTLS mocks base method.
func (m *MockWebsocketListenerForWebsocket) GetTLS() *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLS")
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// GetTLS indicates an expected call of GetTLS.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) GetTLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLS", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).GetTLS))
}

// Path mocks base method.
func (m *MockWebsocketListenerForWebsocket) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).Path))
}

// SetPath mocks base method.
func (m *MockWebsocketListenerForWebsocket) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).SetPath), path)
}

// Start mocks base method.
func (m *MockWebsocketListenerForWebsocket) Start(ctx context.Context, wg *sync.WaitGroup) (chan netceptor.BackendSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, wg)
	ret0, _ := ret[0].(chan netceptor.BackendSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockWebsocketListenerForWebsocketMockRecorder) Start(ctx, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWebsocketListenerForWebsocket)(nil).Start), ctx, wg)
}

// Mockconner is a mock of conner interface.
type Mockconner struct {
	ctrl     *gomock.Controller
	recorder *MockconnerMockRecorder
}

// MockconnerMockRecorder is the mock recorder for Mockconner.
type MockconnerMockRecorder struct {
	mock *Mockconner
}

// NewMockconner creates a new mock instance.
func NewMockconner(ctrl *gomock.Controller) *Mockconner {
	mock := &Mockconner{ctrl: ctrl}
	mock.recorder = &MockconnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconner) EXPECT() *MockconnerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockconner) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockconnerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockconner)(nil).Close))
}

// CloseHandler mocks base method.
func (m *Mockconner) CloseHandler() func(int, string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseHandler")
	ret0, _ := ret[0].(func(int, string) error)
	return ret0
}

// CloseHandler indicates an expected call of CloseHandler.
func (mr *MockconnerMockRecorder) CloseHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseHandler", reflect.TypeOf((*Mockconner)(nil).CloseHandler))
}

// EnableWriteCompression mocks base method.
func (m *Mockconner) EnableWriteCompression(enable bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableWriteCompression", enable)
}

// EnableWriteCompression indicates an expected call of EnableWriteCompression.
func (mr *MockconnerMockRecorder) EnableWriteCompression(enable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWriteCompression", reflect.TypeOf((*Mockconner)(nil).EnableWriteCompression), enable)
}

// LocalAddr mocks base method.
func (m *Mockconner) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockconnerMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*Mockconner)(nil).LocalAddr))
}

// NextReader mocks base method.
func (m *Mockconner) NextReader() (int, io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextReader")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(io.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NextReader indicates an expected call of NextReader.
func (mr *MockconnerMockRecorder) NextReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextReader", reflect.TypeOf((*Mockconner)(nil).NextReader))
}

// NextWriter mocks base method.
func (m *Mockconner) NextWriter(messageType int) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextWriter", messageType)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextWriter indicates an expected call of NextWriter.
func (mr *MockconnerMockRecorder) NextWriter(messageType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextWriter", reflect.TypeOf((*Mockconner)(nil).NextWriter), messageType)
}

// PingHandler mocks base method.
func (m *Mockconner) PingHandler() func(string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHandler")
	ret0, _ := ret[0].(func(string) error)
	return ret0
}

// PingHandler indicates an expected call of PingHandler.
func (mr *MockconnerMockRecorder) PingHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHandler", reflect.TypeOf((*Mockconner)(nil).PingHandler))
}

// PongHandler mocks base method.
func (m *Mockconner) PongHandler() func(string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PongHandler")
	ret0, _ := ret[0].(func(string) error)
	return ret0
}

// PongHandler indicates an expected call of PongHandler.
func (mr *MockconnerMockRecorder) PongHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PongHandler", reflect.TypeOf((*Mockconner)(nil).PongHandler))
}

// ReadJSON mocks base method.
func (m *Mockconner) ReadJSON(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON.
func (mr *MockconnerMockRecorder) ReadJSON(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*Mockconner)(nil).ReadJSON), v)
}

// ReadMessage mocks base method.
func (m *Mockconner) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockconnerMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*Mockconner)(nil).ReadMessage))
}

// RemoteAddr mocks base method.
func (m *Mockconner) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockconnerMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*Mockconner)(nil).RemoteAddr))
}

// SetCloseHandler mocks base method.
func (m *Mockconner) SetCloseHandler(h func(int, string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloseHandler", h)
}

// SetCloseHandler indicates an expected call of SetCloseHandler.
func (mr *MockconnerMockRecorder) SetCloseHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloseHandler", reflect.TypeOf((*Mockconner)(nil).SetCloseHandler), h)
}

// SetCompressionLevel mocks base method.
func (m *Mockconner) SetCompressionLevel(level int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCompressionLevel", level)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCompressionLevel indicates an expected call of SetCompressionLevel.
func (mr *MockconnerMockRecorder) SetCompressionLevel(level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCompressionLevel", reflect.TypeOf((*Mockconner)(nil).SetCompressionLevel), level)
}

// SetPingHandler mocks base method.
func (m *Mockconner) SetPingHandler(h func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPingHandler", h)
}

// SetPingHandler indicates an expected call of SetPingHandler.
func (mr *MockconnerMockRecorder) SetPingHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPingHandler", reflect.TypeOf((*Mockconner)(nil).SetPingHandler), h)
}

// SetPongHandler mocks base method.
func (m *Mockconner) SetPongHandler(h func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPongHandler", h)
}

// SetPongHandler indicates an expected call of SetPongHandler.
func (mr *MockconnerMockRecorder) SetPongHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPongHandler", reflect.TypeOf((*Mockconner)(nil).SetPongHandler), h)
}

// SetReadDeadline mocks base method.
func (m *Mockconner) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockconnerMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*Mockconner)(nil).SetReadDeadline), t)
}

// SetReadLimit mocks base method.
func (m *Mockconner) SetReadLimit(limit int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadLimit", limit)
}

// SetReadLimit indicates an expected call of SetReadLimit.
func (mr *MockconnerMockRecorder) SetReadLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadLimit", reflect.TypeOf((*Mockconner)(nil).SetReadLimit), limit)
}

// SetWriteDeadline mocks base method.
func (m *Mockconner) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockconnerMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*Mockconner)(nil).SetWriteDeadline), t)
}

// Subprotocol mocks base method.
func (m *Mockconner) Subprotocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subprotocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subprotocol indicates an expected call of Subprotocol.
func (mr *MockconnerMockRecorder) Subprotocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subprotocol", reflect.TypeOf((*Mockconner)(nil).Subprotocol))
}

// UnderlyingConn mocks base method.
func (m *Mockconner) UnderlyingConn() net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnderlyingConn")
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// UnderlyingConn indicates an expected call of UnderlyingConn.
func (mr *MockconnerMockRecorder) UnderlyingConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnderlyingConn", reflect.TypeOf((*Mockconner)(nil).UnderlyingConn))
}

// WriteControl mocks base method.
func (m *Mockconner) WriteControl(messageType int, data []byte, deadline time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteControl", messageType, data, deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl.
func (mr *MockconnerMockRecorder) WriteControl(messageType, data, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*Mockconner)(nil).WriteControl), messageType, data, deadline)
}

// WriteJSON mocks base method.
func (m *Mockconner) WriteJSON(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON.
func (mr *MockconnerMockRecorder) WriteJSON(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*Mockconner)(nil).WriteJSON), v)
}

// WriteMessage mocks base method.
func (m *Mockconner) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockconnerMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*Mockconner)(nil).WriteMessage), messageType, data)
}

// WritePreparedMessage mocks base method.
func (m *Mockconner) WritePreparedMessage(pm *websocket.PreparedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePreparedMessage", pm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePreparedMessage indicates an expected call of WritePreparedMessage.
func (mr *MockconnerMockRecorder) WritePreparedMessage(pm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePreparedMessage", reflect.TypeOf((*Mockconner)(nil).WritePreparedMessage), pm)
}

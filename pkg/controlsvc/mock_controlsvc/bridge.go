// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ansible/receptor/pkg/controlsvc (interfaces: ReadWriteCloser,Bridger)

// Package mock_controlsvc is a generated GoMock package.
package mock_controlsvc

import (
	io "io"
	reflect "reflect"

	logger "github.com/ansible/receptor/pkg/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockReadWriteCloser is a mock of ReadWriteCloser interface.
type MockReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteCloserMockRecorder
}

// MockReadWriteCloserMockRecorder is the mock recorder for MockReadWriteCloser.
type MockReadWriteCloserMockRecorder struct {
	mock *MockReadWriteCloser
}

// NewMockReadWriteCloser creates a new mock instance.
func NewMockReadWriteCloser(ctrl *gomock.Controller) *MockReadWriteCloser {
	mock := &MockReadWriteCloser{ctrl: ctrl}
	mock.recorder = &MockReadWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteCloser) EXPECT() *MockReadWriteCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadWriteCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteCloser)(nil).Close))
}

// Read mocks base method.
func (m *MockReadWriteCloser) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriteCloserMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteCloser)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockReadWriteCloser) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriteCloserMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteCloser)(nil).Write), arg0)
}

// MockBridger is a mock of Bridger interface.
type MockBridger struct {
	ctrl     *gomock.Controller
	recorder *MockBridgerMockRecorder
}

// MockBridgerMockRecorder is the mock recorder for MockBridger.
type MockBridgerMockRecorder struct {
	mock *MockBridger
}

// NewMockBridger creates a new mock instance.
func NewMockBridger(ctrl *gomock.Controller) *MockBridger {
	mock := &MockBridger{ctrl: ctrl}
	mock.recorder = &MockBridgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridger) EXPECT() *MockBridgerMockRecorder {
	return m.recorder
}

// BridgeConns mocks base method.
func (m *MockBridger) BridgeConns(arg0 io.ReadWriteCloser, arg1 string, arg2 io.ReadWriteCloser, arg3 string, arg4 *logger.ReceptorLogger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BridgeConns", arg0, arg1, arg2, arg3, arg4)
}

// BridgeConns indicates an expected call of BridgeConns.
func (mr *MockBridgerMockRecorder) BridgeConns(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeConns", reflect.TypeOf((*MockBridger)(nil).BridgeConns), arg0, arg1, arg2, arg3, arg4)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/netceptor/ping.go

// Package mock_netceptor is a generated GoMock package.
package mock_netceptor

import (
	context "context"
	reflect "reflect"

	netceptor "github.com/ansible/receptor/pkg/netceptor"
	gomock "github.com/golang/mock/gomock"
)

// MockNetceptorForPing is a mock of NetceptorForPing interface.
type MockNetceptorForPing struct {
	ctrl     *gomock.Controller
	recorder *MockNetceptorForPingMockRecorder
}

// MockNetceptorForPingMockRecorder is the mock recorder for MockNetceptorForPing.
type MockNetceptorForPingMockRecorder struct {
	mock *MockNetceptorForPing
}

// NewMockNetceptorForPing creates a new mock instance.
func NewMockNetceptorForPing(ctrl *gomock.Controller) *MockNetceptorForPing {
	mock := &MockNetceptorForPing{ctrl: ctrl}
	mock.recorder = &MockNetceptorForPingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetceptorForPing) EXPECT() *MockNetceptorForPingMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockNetceptorForPing) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNetceptorForPingMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNetceptorForPing)(nil).Context))
}

// ListenPacket mocks base method.
func (m *MockNetceptorForPing) ListenPacket(service string) (netceptor.PacketConner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenPacket", service)
	ret0, _ := ret[0].(netceptor.PacketConner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenPacket indicates an expected call of ListenPacket.
func (mr *MockNetceptorForPingMockRecorder) ListenPacket(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPacket", reflect.TypeOf((*MockNetceptorForPing)(nil).ListenPacket), service)
}

// NewAddr mocks base method.
func (m *MockNetceptorForPing) NewAddr(target, service string) netceptor.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAddr", target, service)
	ret0, _ := ret[0].(netceptor.Addr)
	return ret0
}

// NewAddr indicates an expected call of NewAddr.
func (mr *MockNetceptorForPingMockRecorder) NewAddr(target, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddr", reflect.TypeOf((*MockNetceptorForPing)(nil).NewAddr), target, service)
}

// NodeID mocks base method.
func (m *MockNetceptorForPing) NodeID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *MockNetceptorForPingMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockNetceptorForPing)(nil).NodeID))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: flock.go

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSyscaller is a mock of Syscaller interface.
type MockSyscaller struct {
	ctrl     *gomock.Controller
	recorder *MockSyscallerMockRecorder
}

// MockSyscallerMockRecorder is the mock recorder for MockSyscaller.
type MockSyscallerMockRecorder struct {
	mock *MockSyscaller
}

// NewMockSyscaller creates a new mock instance.
func NewMockSyscaller(ctrl *gomock.Controller) *MockSyscaller {
	mock := &MockSyscaller{ctrl: ctrl}
	mock.recorder = &MockSyscallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyscaller) EXPECT() *MockSyscallerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSyscaller) Close(fd int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSyscallerMockRecorder) Close(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSyscaller)(nil).Close), fd)
}

// Flock mocks base method.
func (m *MockSyscaller) Flock(fd, how int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flock", fd, how)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flock indicates an expected call of Flock.
func (mr *MockSyscallerMockRecorder) Flock(fd, how interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flock", reflect.TypeOf((*MockSyscaller)(nil).Flock), fd, how)
}

// Open mocks base method.
func (m *MockSyscaller) Open(path string, mode int, perm uint32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", path, mode, perm)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSyscallerMockRecorder) Open(path, mode, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSyscaller)(nil).Open), path, mode, perm)
}

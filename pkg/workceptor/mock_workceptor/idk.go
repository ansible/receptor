// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ansible/receptor/pkg/workceptor (interfaces: BaseWorkUnitForWorkUnit)

// Package mock_workceptor is a generated GoMock package.
package mock_workceptor

import (
	reflect "reflect"
	sync "sync"

	workceptor "github.com/ansible/receptor/pkg/workceptor"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseWorkUnitForWorkUnit is a mock of BaseWorkUnitForWorkUnit interface.
type MockBaseWorkUnitForWorkUnit struct {
	ctrl     *gomock.Controller
	recorder *MockBaseWorkUnitForWorkUnitMockRecorder
}

// MockBaseWorkUnitForWorkUnitMockRecorder is the mock recorder for MockBaseWorkUnitForWorkUnit.
type MockBaseWorkUnitForWorkUnitMockRecorder struct {
	mock *MockBaseWorkUnitForWorkUnit
}

// NewMockBaseWorkUnitForWorkUnit creates a new mock instance.
func NewMockBaseWorkUnitForWorkUnit(ctrl *gomock.Controller) *MockBaseWorkUnitForWorkUnit {
	mock := &MockBaseWorkUnitForWorkUnit{ctrl: ctrl}
	mock.recorder = &MockBaseWorkUnitForWorkUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseWorkUnitForWorkUnit) EXPECT() *MockBaseWorkUnitForWorkUnitMockRecorder {
	return m.recorder
}

// CancelContext mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) CancelContext() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelContext")
}

// CancelContext indicates an expected call of CancelContext.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) CancelContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContext", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).CancelContext))
}

// Debug mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Debug(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Error(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Error), varargs...)
}

// GetStatusCopy mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) GetStatusCopy() workceptor.StatusFileData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCopy")
	ret0, _ := ret[0].(workceptor.StatusFileData)
	return ret0
}

// GetStatusCopy indicates an expected call of GetStatusCopy.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) GetStatusCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCopy", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).GetStatusCopy))
}

// GetStatusLock mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) GetStatusLock() *sync.RWMutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusLock")
	ret0, _ := ret[0].(*sync.RWMutex)
	return ret0
}

// GetStatusLock indicates an expected call of GetStatusLock.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) GetStatusLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusLock", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).GetStatusLock))
}

// GetStatusWithoutExtraData mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) GetStatusWithoutExtraData() *workceptor.StatusFileData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusWithoutExtraData")
	ret0, _ := ret[0].(*workceptor.StatusFileData)
	return ret0
}

// GetStatusWithoutExtraData indicates an expected call of GetStatusWithoutExtraData.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) GetStatusWithoutExtraData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusWithoutExtraData", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).GetStatusWithoutExtraData))
}

// GetWorkceptor mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) GetWorkceptor() *workceptor.Workceptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkceptor")
	ret0, _ := ret[0].(*workceptor.Workceptor)
	return ret0
}

// GetWorkceptor indicates an expected call of GetWorkceptor.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) GetWorkceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkceptor", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).GetWorkceptor))
}

// ID mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).ID))
}

// Info mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Info(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Info), varargs...)
}

// Init mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Init(arg0 *workceptor.Workceptor, arg1, arg2 string, arg3 workceptor.FileSystemer, arg4 workceptor.WatcherWrapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1, arg2, arg3, arg4)
}

// Init indicates an expected call of Init.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Init(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Init), arg0, arg1, arg2, arg3, arg4)
}

// LastUpdateError mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) LastUpdateError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUpdateError")
	ret0, _ := ret[0].(error)
	return ret0
}

// LastUpdateError indicates an expected call of LastUpdateError.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) LastUpdateError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUpdateError", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).LastUpdateError))
}

// Load mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Load))
}

// MonitorLocalStatus mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) MonitorLocalStatus() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorLocalStatus")
}

// MonitorLocalStatus indicates an expected call of MonitorLocalStatus.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) MonitorLocalStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorLocalStatus", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).MonitorLocalStatus))
}

// Release mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Release(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Release), arg0)
}

// Save mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Save))
}

// SetFromParams mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) SetFromParams(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFromParams", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFromParams indicates an expected call of SetFromParams.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) SetFromParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFromParams", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).SetFromParams), arg0)
}

// SetStatusExtraData mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) SetStatusExtraData(arg0 *workceptor.RemoteExtraData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusExtraData", arg0)
}

// SetStatusExtraData indicates an expected call of SetStatusExtraData.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) SetStatusExtraData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusExtraData", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).SetStatusExtraData), arg0)
}

// Status mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Status() *workceptor.StatusFileData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*workceptor.StatusFileData)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Status))
}

// StatusFileName mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) StatusFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusFileName indicates an expected call of StatusFileName.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) StatusFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusFileName", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).StatusFileName))
}

// StdoutFileName mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) StdoutFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdoutFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StdoutFileName indicates an expected call of StdoutFileName.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) StdoutFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdoutFileName", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).StdoutFileName))
}

// UnitDir mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) UnitDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitDir indicates an expected call of UnitDir.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) UnitDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitDir", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).UnitDir))
}

// UnredactedStatus mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) UnredactedStatus() *workceptor.StatusFileData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnredactedStatus")
	ret0, _ := ret[0].(*workceptor.StatusFileData)
	return ret0
}

// UnredactedStatus indicates an expected call of UnredactedStatus.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) UnredactedStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnredactedStatus", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).UnredactedStatus))
}

// UpdateBasicStatus mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) UpdateBasicStatus(arg0 int, arg1 string, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBasicStatus", arg0, arg1, arg2)
}

// UpdateBasicStatus indicates an expected call of UpdateBasicStatus.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) UpdateBasicStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicStatus", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).UpdateBasicStatus), arg0, arg1, arg2)
}

// UpdateFullStatus mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) UpdateFullStatus(arg0 func(*workceptor.StatusFileData)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateFullStatus", arg0)
}

// UpdateFullStatus indicates an expected call of UpdateFullStatus.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) UpdateFullStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFullStatus", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).UpdateFullStatus), arg0)
}

// Warning mocks base method.
func (m *MockBaseWorkUnitForWorkUnit) Warning(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockBaseWorkUnitForWorkUnitMockRecorder) Warning(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockBaseWorkUnitForWorkUnit)(nil).Warning), varargs...)
}

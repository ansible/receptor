// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ansible/receptor/pkg/workceptor (interfaces: ServerForWorkceptor)

// Package mock_workceptor is a generated GoMock package.
package mock_workceptor

import (
	context "context"
	tls "crypto/tls"
	fs "io/fs"
	net "net"
	reflect "reflect"

	controlsvc "github.com/ansible/receptor/pkg/controlsvc"
	gomock "github.com/golang/mock/gomock"
)

// MockServerForWorkceptor is a mock of ServerForWorkceptor interface.
type MockServerForWorkceptor struct {
	ctrl     *gomock.Controller
	recorder *MockServerForWorkceptorMockRecorder
}

// MockServerForWorkceptorMockRecorder is the mock recorder for MockServerForWorkceptor.
type MockServerForWorkceptorMockRecorder struct {
	mock *MockServerForWorkceptor
}

// NewMockServerForWorkceptor creates a new mock instance.
func NewMockServerForWorkceptor(ctrl *gomock.Controller) *MockServerForWorkceptor {
	mock := &MockServerForWorkceptor{ctrl: ctrl}
	mock.recorder = &MockServerForWorkceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerForWorkceptor) EXPECT() *MockServerForWorkceptorMockRecorder {
	return m.recorder
}

// AddControlFunc mocks base method.
func (m *MockServerForWorkceptor) AddControlFunc(arg0 string, arg1 controlsvc.ControlCommandType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControlFunc", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddControlFunc indicates an expected call of AddControlFunc.
func (mr *MockServerForWorkceptorMockRecorder) AddControlFunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControlFunc", reflect.TypeOf((*MockServerForWorkceptor)(nil).AddControlFunc), arg0, arg1)
}

// ConnectionListener mocks base method.
func (m *MockServerForWorkceptor) ConnectionListener(arg0 context.Context, arg1 net.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectionListener", arg0, arg1)
}

// ConnectionListener indicates an expected call of ConnectionListener.
func (mr *MockServerForWorkceptorMockRecorder) ConnectionListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionListener", reflect.TypeOf((*MockServerForWorkceptor)(nil).ConnectionListener), arg0, arg1)
}

// RunControlSession mocks base method.
func (m *MockServerForWorkceptor) RunControlSession(arg0 net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunControlSession", arg0)
}

// RunControlSession indicates an expected call of RunControlSession.
func (mr *MockServerForWorkceptorMockRecorder) RunControlSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunControlSession", reflect.TypeOf((*MockServerForWorkceptor)(nil).RunControlSession), arg0)
}

// RunControlSvc mocks base method.
func (m *MockServerForWorkceptor) RunControlSvc(arg0 context.Context, arg1 string, arg2 *tls.Config, arg3 string, arg4 fs.FileMode, arg5 string, arg6 *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunControlSvc", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunControlSvc indicates an expected call of RunControlSvc.
func (mr *MockServerForWorkceptorMockRecorder) RunControlSvc(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunControlSvc", reflect.TypeOf((*MockServerForWorkceptor)(nil).RunControlSvc), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SetServerNet mocks base method.
func (m *MockServerForWorkceptor) SetServerNet(arg0 controlsvc.Neter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServerNet", arg0)
}

// SetServerNet indicates an expected call of SetServerNet.
func (mr *MockServerForWorkceptorMockRecorder) SetServerNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerNet", reflect.TypeOf((*MockServerForWorkceptor)(nil).SetServerNet), arg0)
}

// SetServerTLS mocks base method.
func (m *MockServerForWorkceptor) SetServerTLS(arg0 controlsvc.Tlser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServerTLS", arg0)
}

// SetServerTLS indicates an expected call of SetServerTLS.
func (mr *MockServerForWorkceptorMockRecorder) SetServerTLS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerTLS", reflect.TypeOf((*MockServerForWorkceptor)(nil).SetServerTLS), arg0)
}

// SetServerUtils mocks base method.
func (m *MockServerForWorkceptor) SetServerUtils(arg0 controlsvc.Utiler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServerUtils", arg0)
}

// SetServerUtils indicates an expected call of SetServerUtils.
func (mr *MockServerForWorkceptorMockRecorder) SetServerUtils(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerUtils", reflect.TypeOf((*MockServerForWorkceptor)(nil).SetServerUtils), arg0)
}

// SetupConnection mocks base method.
func (m *MockServerForWorkceptor) SetupConnection(arg0 net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupConnection", arg0)
}

// SetupConnection indicates an expected call of SetupConnection.
func (mr *MockServerForWorkceptorMockRecorder) SetupConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupConnection", reflect.TypeOf((*MockServerForWorkceptor)(nil).SetupConnection), arg0)
}
